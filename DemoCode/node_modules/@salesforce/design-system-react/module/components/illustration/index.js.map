{"version":3,"sources":["../../../.tmp-es/components/illustration/index.jsx"],"names":["React","PropTypes","checkProps","classNames","Svg","ILLUSTRATION","componentDoc","Illustration","props","className","illustration","heading","messageBody","name","path","size","style","kababCaseName","replace","toLowerCase","styles","illustrationSvg","height","displayName","propTypes","oneOfType","array","object","string","internalIllustration","bool","isRequired","node","oneOf","defaultProps"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Illustration Component\n\n// Based on SLDS v2.6.2\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from '../../utilities/class-names';\n\n// ## SVG\nimport Svg from '../utilities/utility-icon/svg';\n\n// ## Constants\nimport { ILLUSTRATION } from '../../utilities/constants';\nimport componentDoc from './component.json';\n\n/**\n * An illustration is an image and inline text that work in tandem to communicate a state in a more friendly way.\n */\nconst Illustration = (props) => {\n\tconst {\n\t\tclassName,\n\t\tillustration,\n\t\theading,\n\t\tmessageBody,\n\t\tname,\n\t\tpath,\n\t\tsize,\n\t\tstyle,\n\t} = props;\n\n\tcheckProps('Illustration', props, componentDoc);\n\tconst kababCaseName = name ? name.replace(/_| /g, '-').toLowerCase() : '';\n\tconst styles = { ...style };\n\tlet illustrationSvg;\n\n\t// large illustration svg should have a default height of 400px if not already specified\n\tif (size === 'large' && !styles.height) {\n\t\tstyles.height = '400px';\n\t}\n\n\tif (illustration) {\n\t\t// Use SVG data passed in with `illustration` prop\n\t\tillustrationSvg = (\n\t\t\t<Svg\n\t\t\t\tclassName=\"slds-illustration__svg\"\n\t\t\t\taria-hidden=\"true\"\n\t\t\t\tdata={illustration}\n\t\t\t\tname={kababCaseName}\n\t\t\t\tstyle={styles}\n\t\t\t/>\n\t\t);\n\t} else if (path) {\n\t\tillustrationSvg = (\n\t\t\t<svg\n\t\t\t\tclassName=\"slds-illustration__svg\"\n\t\t\t\taria-hidden=\"true\"\n\t\t\t\tname={kababCaseName}\n\t\t\t\tstyle={styles}\n\t\t\t>\n\t\t\t\t<use xlinkHref={path} />\n\t\t\t</svg>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames(className, 'slds-illustration', {\n\t\t\t\t'slds-illustration_small': size === 'small',\n\t\t\t\t'slds-illustration_large': size === 'large',\n\t\t\t})}\n\t\t>\n\t\t\t{illustrationSvg}\n\t\t\t<div className=\"slds-text-longform\">\n\t\t\t\t{heading ? (\n\t\t\t\t\t<h3 className=\"slds-text-heading_medium\">{heading}</h3>\n\t\t\t\t) : null}\n\t\t\t\t{messageBody ? (\n\t\t\t\t\t<p className=\"slds-text-body_regular\">{messageBody}</p>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nIllustration.displayName = ILLUSTRATION;\n\n// ### Prop Types\nIllustration.propTypes = {\n\t/**\n\t * CSS classes that are applied to the SVG. _Tested with Mocha testing._\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * A heading text. It is required if illustration is present. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\theading: PropTypes.string,\n\t/**\n\t * A custom SVG object to use instead of the supplied SLDS illustrations, look in `design-system-react/icons` for examples and syntax. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tillustration: PropTypes.object,\n\t/**\n\t * Indicates whether the illustration SVGs are from the design-system-react repo. If yes, set to true.\n\t */\n\tinternalIllustration: PropTypes.bool.isRequired,\n\t/**\n\t * A message body below the heading to further communicate the state of the component. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tmessageBody: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t/**\n\t * Name of the illustration. Visit <a href='https://lightningdesignsystem.com/components/illustration/'>Lightning Design System Illustration</a> to reference illustration names. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the illustration SVG image. _Tested with snapshot testing._\n\t */\n\tpath: PropTypes.string,\n\t/**\n\t * Size of the illustration. _Tested with snapshot testing._ _Tested with Mocha testing._\n\t */\n\tsize: PropTypes.oneOf(['small', 'large']),\n\t/**\n\t * Custom styles to be passed to the illustration SVG. _Tested with Mocha testing._\n\t */\n\tstyle: PropTypes.object,\n};\n\nIllustration.defaultProps = {\n\tinternalIllustration: true,\n\tsize: 'small',\n\tstyle: {},\n};\n\nexport default Illustration;\n"],"file":"index.js"}