{"version":3,"sources":["../../../.tmp-es/components/expression/index.jsx"],"names":["React","PropTypes","classNames","shortid","assign","EXPRESSION","ExpressionGroup","propTypes","id","string","children","node","events","shape","onChangeTrigger","func","onAddGroup","onAddCondition","onChangeCustomLogicValue","labels","addCondition","addGroup","customLogic","takeAction","title","triggerAll","triggerAlways","triggerAny","triggerCustom","triggerFormula","className","oneOfType","array","object","triggerType","oneOf","customLogicValue","defaultProps","Expression","generatedId","generate","props","getId","Component","displayName"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Expression design pattern](https://lightningdesignsystem.com/components/expression/) in React.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\nimport assign from 'lodash.assign';\nimport { EXPRESSION } from '../../utilities/constants';\nimport ExpressionGroup from './group';\n\nconst propTypes = {\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * `Expression` children, accepts `ExpressionCondition` & `ExpressionGroup`\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * Callbacks for various expression events such as trigger change, add group etc\n\t */\n\tevents: PropTypes.shape({\n\t\tonChangeTrigger: PropTypes.func,\n\t\tonAddGroup: PropTypes.func,\n\t\tonAddCondition: PropTypes.func,\n\t\tonChangeCustomLogicValue: PropTypes.func,\n\t}),\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `addCondition`: Label for the Add Condition Button. Defaults to \"Add Condition\"\n\t * * `addGroup`: Label for the Add Group Button. Defaults to \"Add Group\"\n\t * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to \"Custom Logic\"\n\t * * `takeAction`: Label for the `triggerType` selector. Defaults to \"Take Action When\"\n\t * * `title` : Title for the Expression. Defaults to \"Conditions\"\n\t * * `triggerAll`: Label for the `all` value within the trigger selector\n\t * * `triggerAlways`: Label for the `always` value within the trigger selector\n\t * * `triggerAny`: Label for the `any` value within the trigger selector\n\t * * `triggerCustom`: Label for the `custom` value within the trigger selector\n\t * * `triggerFormula`: Label for the `formula` value within the trigger selector\n\t */\n\tlabels: PropTypes.shape({\n\t\taddCondition: PropTypes.string,\n\t\taddGroup: PropTypes.string,\n\t\tcustomLogic: PropTypes.string,\n\t\ttakeAction: PropTypes.string,\n\t\ttitle: PropTypes.string,\n\t\ttriggerAll: PropTypes.string,\n\t\ttriggerAlways: PropTypes.string,\n\t\ttriggerAny: PropTypes.string,\n\t\ttriggerCustom: PropTypes.string,\n\t\ttriggerFormula: PropTypes.string,\n\t}),\n\t/**\n\t * CSS classes to be added to the element with class `.slds-expression`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Sets the trigger type for the expression.\n\t */\n\ttriggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n\t/**\n\t * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n\t */\n\tcustomLogicValue: PropTypes.string,\n};\n\nconst defaultProps = {\n\tlabels: {\n\t\ttitle: 'Conditions',\n\t},\n};\n\n/**\n * Expression builders help users declaratively construct logical expressions.\n * These expressions can be used when querying for a filtered set of records,\n * creating rules to control when something executes, or any other conditional logic.\n */\nclass Expression extends React.Component {\n\tcomponentWillMount() {\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\t/**\n\t * Get the Expression Group's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\trender() {\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames('slds-expression', this.props.className)}\n\t\t\t\tid={this.getId()}\n\t\t\t>\n\t\t\t\t<h2 className=\"slds-expression__title\">{labels.title}</h2>\n\t\t\t\t<ExpressionGroup\n\t\t\t\t\tisRoot\n\t\t\t\t\tid={`${this.getId()}-group`}\n\t\t\t\t\tevents={this.props.events}\n\t\t\t\t\tlabels={labels}\n\t\t\t\t\tcustomLogicValue={this.props.customLogicValue}\n\t\t\t\t\ttriggerType={this.props.triggerType}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</ExpressionGroup>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nExpression.displayName = EXPRESSION;\nExpression.propTypes = propTypes;\nExpression.defaultProps = defaultProps;\n\nexport default Expression;\n"],"file":"index.js"}