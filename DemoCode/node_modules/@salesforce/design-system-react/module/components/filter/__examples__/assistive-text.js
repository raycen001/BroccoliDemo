function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import IconSettings from "../../../../components/icon-settings";
import Filter from "../../../../components/filter";
import Combobox from "../../../../components/combobox";
var options = {
  'show-me': [{
    id: 1,
    label: 'All Products',
    value: 'all-products'
  }, {
    id: 2,
    label: 'All Wackamoles',
    value: 'all-Wackamoles'
  }]
};

var Example =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Example, _React$Component);

  function Example() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Example);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Example)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      'show-me': {
        selectedItem: options['show-me'][0],
        isActive: true,
        comboboxSelection: [options['show-me'][0]]
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onChangePredicate", function (event, _ref) {
      var id = _ref.id;
      var idSuffix = id.split('sample-panel-filtering-')[1];

      _this.setState(_defineProperty({}, idSuffix, _objectSpread({}, _this.state[idSuffix], {
        selectedItem: _this.state[idSuffix].comboboxSelection[0]
      })));
    });

    _defineProperty(_assertThisInitialized(_this), "onRemove", function (event, _ref2) {
      var id = _ref2.id;
      var idSuffix = id.split('sample-panel-filtering-')[1];

      _this.setState(_defineProperty({}, idSuffix, _objectSpread({}, _this.state[idSuffix], {
        isActive: false
      })));
    });

    return _this;
  }

  _createClass(Example, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return this.state['show-me'].isActive &&
      /*#__PURE__*/
      React.createElement(IconSettings, {
        iconPath: "/assets/icons"
      },
      /*#__PURE__*/
      React.createElement(Filter, _extends({
        assistiveText: {
          editFilter: 'editFilter-TEST',
          editFilterHeading: 'editFilterHeading-TEST',
          removeFilter: 'removeFilter-TEST'
        },
        align: this.props.align,
        id: "sample-panel-filtering-show-me",
        onChange: this.onChangePredicate,
        onRemove: this.onRemove,
        property: "Show Me",
        predicate: this.state['show-me'].selectedItem.label
      }, this.props),
      /*#__PURE__*/
      React.createElement(Combobox, {
        events: {
          onSelect: function onSelect(event, data) {
            _this2.setState({
              'show-me': _objectSpread({}, _this2.state['show-me'], {
                comboboxSelection: data.selection
              })
            });
          }
        },
        labels: {
          label: 'Show Me',
          placeholder: 'Select record type'
        },
        menuPosition: "relative",
        options: options['show-me'],
        selection: this.state['show-me'].comboboxSelection,
        variant: "readonly"
      })));
    }
  }], [{
    key: "propTypes",
    value: function propTypes() {
      return {
        align: PropTypes.string
      };
    }
  }]);

  return Example;
}(React.Component);

_defineProperty(Example, "displayName", 'FilterExample');

export default Example; // export is replaced with `ReactDOM.render(<Example />, mountNode);` at runtime
//# sourceMappingURL=assistive-text.js.map