{"version":3,"sources":["../../../../.tmp-es/components/progress-indicator/private/step.jsx"],"names":["React","PropTypes","classNames","Tooltip","PROGRESS_INDICATOR_STEP","ButtonIcon","displayName","propTypes","assistiveText","shape","completedStep","string","disabledStep","percentage","step","id","oneOfType","number","index","isCompleted","bool","isDisabled","isError","isSelected","label","node","onClick","func","onFocus","object","tooltipIsOpen","tooltipPosition","oneOf","Step","renderIcon","status","props","data","icon","handleClick","event","handleFocus","stepButton","cursor","errorStep","tooltipProps","align","content","theme","position","triggerStyle","display","isOpen","buttonIcon","Component"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, 'a simple javascript utility for conditionally\n// joining classNames together.'\nimport classNames from 'classnames';\n\n// Child component\nimport Tooltip from '../../tooltip';\nimport { PROGRESS_INDICATOR_STEP } from '../../../utilities/constants';\nimport ButtonIcon from '../../icon/button-icon';\n\n// ### Display Name\nconst displayName = PROGRESS_INDICATOR_STEP;\n\n// ### Prop Types\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `completedStep`: Label for a completed step. The default is `Completed Step`\n\t * * `disabledStep`: Label for disabled step. The default is `Disabled Step`\n\t * * `errorStep`: Label for a step with an error. The default is `Error Step`\n\t * * `percentage`: Label for Progress Bar. The default is `Progress: [this.props.value]%`. You will need to calculate the percentage yourself if changing this string.\n\t * * `step`: Label for a step. It will be typically followed by the number of the step such as \"Step 1\".\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tcompletedStep: PropTypes.string,\n\t\tdisabledStep: PropTypes.string,\n\t\tpercentage: PropTypes.string,\n\t\tstep: PropTypes.string,\n\t}),\n\t/**\n\t * Id for Steps, ranging in [0, steps.length).\n\t */\n\tid: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\t/**\n\t * Index of step. Used for id's if no step ID exists\n\t */\n\tindex: PropTypes.number,\n\t/**\n\t * Determines if the step has been completed\n\t */\n\n\tisCompleted: PropTypes.bool,\n\t/**\n\t * Determines if the step has been disabled\n\t */\n\tisDisabled: PropTypes.bool,\n\t/**\n\t * Determines if the step contains an error\n\t */\n\tisError: PropTypes.bool,\n\t/**\n\t * Determines if the step is currently selected (active)\n\t */\n\tisSelected: PropTypes.bool,\n\t/**\n\t * Label of tooltip attached to the step if applicable.\n\t */\n\tlabel: PropTypes.node,\n\t/**\n\t * Triggered when click on individual steps. By default, it receives an event and returns all info passed to that step.\n\t * users are able to re-define it by passing a function as a prop\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Triggered when focus on individual steps. By default, it receives an event and returns all info passed to that step.\n\t * users are able to re-define it by passing a function as a prop\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Step object. This is passed into event callbacks.\n\t */\n\tstep: PropTypes.object,\n\t/**\n\t * Determines if the tooltip attached to step is always open.\n\t * This is mainly for dev test purpose.\n\t * Usually the tooltip should only show when hover.\n\t */\n\ttooltipIsOpen: PropTypes.bool,\n\t/**\n\t * Please select one of the following:\n\t * * `absolute` - (default if `variant` is `modal`) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n\t * * `overflowBoundaryElement` - (default if `variant` is `base`) The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n\t * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n\t */\n\ttooltipPosition: PropTypes.oneOf([\n\t\t'absolute',\n\t\t'overflowBoundaryElement',\n\t\t'relative',\n\t]),\n};\n\n/**\n * Step renders a button icon and its tooltip if applied.\n * The button is applied with different css classes under different conditions.\n * Button icons have 4 types of status: completed (success), active (in progress), error (warning) and uncompleted (not approached)\n */\nclass Step extends React.Component {\n\t/**\n\t * buttonIcon represents the button icon used for each step.\n\t * the button is applied with different css classes under different conditions.\n\t */\n\tbuttonIcon(renderIcon, status, props) {\n\t\tconst data = {\n\t\t\tisSelected: props.isSelected,\n\t\t\tisError: props.isError,\n\t\t\tisCompleted: props.isCompleted,\n\t\t\tisDisabled: props.isDisabled,\n\t\t\tstep: props.step,\n\t\t};\n\n\t\tconst icon = renderIcon ? (\n\t\t\t<ButtonIcon\n\t\t\t\tcategory=\"utility\"\n\t\t\t\tname={this.props.isError ? 'error' : 'success'}\n\t\t\t/>\n\t\t) : null;\n\n\t\tconst handleClick = (event) => props.onClick(event, data);\n\t\tconst handleFocus = (event) => props.onFocus(event, data);\n\n\t\tconst stepButton = props.isDisabled ? (\n\t\t\t<a\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-button',\n\t\t\t\t\t{ 'slds-button_icon': renderIcon },\n\t\t\t\t\t'slds-progress__marker',\n\t\t\t\t\t{ 'slds-progress__marker_icon': renderIcon },\n\t\t\t\t\t'slds-is-disabled'\n\t\t\t\t)}\n\t\t\t\taria-disabled\n\t\t\t\taria-describedby={`progress-indicator-tooltip-${this.props.step.id ||\n\t\t\t\t\tthis.props.index}`}\n\t\t\t\tstyle={{ cursor: 'not-allowed' }}\n\t\t\t\ttabIndex={0}\n\t\t\t\trole=\"button\"\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{this.props.step.assistiveText || (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t{`${props.assistiveText.step} ${props.index + 1}: `}\n\t\t\t\t\t\t\t{props.step.label}\n\t\t\t\t\t\t\t{`- ${status}`}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t) : (\n\t\t\t<button\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-button',\n\t\t\t\t\t{ 'slds-button_icon': renderIcon },\n\t\t\t\t\t'slds-progress__marker',\n\t\t\t\t\t{ 'slds-progress__marker_icon': renderIcon }\n\t\t\t\t)}\n\t\t\t\tonClick={handleClick}\n\t\t\t\tonFocus={handleFocus}\n\t\t\t\taria-describedby={`progress-indicator-tooltip-${this.props.step.id ||\n\t\t\t\t\tthis.props.index}`}\n\t\t\t\taria-current={this.props.isSelected ? 'step' : null}\n\t\t\t\ttype=\"button\"\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{this.props.step.assistiveText || (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t{`${props.assistiveText.step} ${props.index + 1}: `}\n\t\t\t\t\t\t\t{props.step.label}\n\t\t\t\t\t\t\t{status ? ` - ${status}` : ''}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t</button>\n\t\t);\n\n\t\treturn stepButton;\n\t}\n\n\trender() {\n\t\tconst renderIcon = this.props.isCompleted || this.props.isError;\n\t\tlet status = '';\n\t\tif (this.props.isError) {\n\t\t\tstatus = this.props.assistiveText.errorStep;\n\t\t} else if (this.props.isCompleted) {\n\t\t\tstatus = this.props.assistiveText.completedStep;\n\t\t} else if (this.props.isDisabled) {\n\t\t\tstatus = this.props.assistiveText.disabledStep;\n\t\t}\n\n\t\tconst tooltipProps = {\n\t\t\talign: 'top',\n\t\t\tid: `progress-indicator-tooltip-${this.props.step.id ||\n\t\t\t\tthis.props.index}`,\n\t\t\tcontent: this.props.step.label,\n\t\t\ttheme: 'info',\n\t\t\tposition: this.props.tooltipPosition,\n\t\t\ttriggerStyle: { display: !renderIcon ? 'flex' : '' },\n\t\t};\n\n\t\t// This is mainly for dev test purpose.\n\t\t// `isOpen` is only set to true if tooltip is specified to be open\n\t\t// Do not set isOpen to false or undefined otherwise, because that will\n\t\t// disable any interaction with tooltips\n\t\tif (this.props.tooltipIsOpen) {\n\t\t\ttooltipProps.isOpen = true;\n\t\t}\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName={classNames('slds-progress__item', {\n\t\t\t\t\t'slds-is-completed': this.props.isCompleted,\n\t\t\t\t\t'slds-is-active': this.props.isSelected && !this.props.isError,\n\t\t\t\t\t'slds-has-error': this.props.isError,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<Tooltip {...tooltipProps}>\n\t\t\t\t\t{this.buttonIcon(renderIcon, status, this.props)}\n\t\t\t\t</Tooltip>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nStep.propTypes = propTypes;\nStep.displayName = displayName;\n\nexport default Step; // export is replaced with `ReactDOM.render(<Example />, mountNode);` at runtime\n"],"file":"step.js"}