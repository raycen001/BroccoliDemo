{"version":3,"sources":["../../../.tmp-es/components/welcome-mat/info-badge.jsx"],"names":["React","PropTypes","shortid","Icon","WELCOME_MAT_BADGE","displayName","propTypes","assistiveText","shape","completed","string","className","oneOfType","array","object","id","image","isComplete","bool","onCompleteRenderActions","func","defaultProps","variant","InfoBadge","generatedId","generate","props","getId","label","getCompletedText","children","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;AACA;AACA;;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA,IAAMC,WAAW,GAAGD,iBAApB;AAEA,IAAME,SAAS,GAAG;AACjB;;;;AAIAC,EAAAA,aAAa,EAAEN,SAAS,CAACO,KAAV,CAAgB;AAC9BC,IAAAA,SAAS,EAAER,SAAS,CAACS;AADS,GAAhB,CALE;;AAQjB;;;AAGAC,EAAAA,SAAS,EAAEV,SAAS,CAACW,SAAV,CAAoB,CAC9BX,SAAS,CAACY,KADoB,EAE9BZ,SAAS,CAACa,MAFoB,EAG9Bb,SAAS,CAACS,MAHoB,CAApB,CAXM;;AAgBjB;;;AAGAK,EAAAA,EAAE,EAAEd,SAAS,CAACS,MAnBG;;AAoBjB;;;AAGAM,EAAAA,KAAK,EAAEf,SAAS,CAACS,MAvBA;;AAwBjB;;;AAGAO,EAAAA,UAAU,EAAEhB,SAAS,CAACiB,IA3BL;;AA4BjB;;;AAGAC,EAAAA,uBAAuB,EAAElB,SAAS,CAACmB;AA/BlB,CAAlB;AAkCA,IAAMC,YAAY,GAAG;AACpBJ,EAAAA,UAAU,EAAE,KADQ;AAEpBK,EAAAA,OAAO,EAAE;AAFW,CAArB;AAKA;;;;IAGMC,S;;;;;;;;;;;;;yCACgB;AACpB,WAAKC,WAAL,GAAmBtB,OAAO,CAACuB,QAAR,EAAnB;AACA;AAED;;;;;;4BAGQ;AACP,aAAO,KAAKC,KAAL,CAAWX,EAAX,IAAiB,KAAKS,WAA7B;AACA;;;uCAEkB;AAClB,aAAO,KAAKE,KAAL,CAAWnB,aAAX,IAA4B,KAAKmB,KAAL,CAAWnB,aAAX,CAAyBE,SAArD,GACJ,KAAKiB,KAAL,CAAWnB,aAAX,CAAyBE,SADrB,GAEJ,WAFH;AAGA;;;6BAEQ;AACR;AAAA;AACC;AAAK,UAAA,EAAE,EAAE,KAAKkB,KAAL,EAAT;AAAuB,UAAA,SAAS,EAAE,KAAKD,KAAL,CAAWf;AAA7C;AAAA;AACC;AAAK,UAAA,SAAS,EAAC;AAAf;AAAA;AACC;AACC,UAAA,SAAS,EAAC,8BADX;AAEC,UAAA,GAAG,EAAE,KAAKe,KAAL,CAAWV,KAFjB;AAGC,UAAA,KAAK,EAAC,IAHP;AAIC,UAAA,MAAM,EAAC,IAJR;AAKC,UAAA,GAAG,EAAC;AALL,UADD;AAAA;AAQC,4BAAC,IAAD;AACC,UAAA,QAAQ,EAAC,QADV;AAEC,UAAA,IAAI,EAAC,OAFN;AAGC,UAAA,aAAa,EAAE;AAAEY,YAAAA,KAAK,EAAE,KAAKC,gBAAL;AAAT;AAHhB,UARD,CADD,EAeE,KAAKH,KAAL,CAAWI,QAfb,EAgBE,KAAKJ,KAAL,CAAWT,UAAX,GAAwB,KAAKS,KAAL,CAAWP,uBAAX,EAAxB,GAA+D,IAhBjE;AADD;AAoBA;;;;EAvCsBnB,KAAK,CAAC+B,S;;AA0C9BR,SAAS,CAAClB,WAAV,GAAwBA,WAAxB;AACAkB,SAAS,CAACjB,SAAV,GAAsBA,SAAtB;AACAiB,SAAS,CAACF,YAAV,GAAyBA,YAAzB;AAEA,eAAeE,SAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Welcome Mat InfoBadge design pattern](https://lightningdesignsystem.com/components/welcome-mat/) in React.\n// Based on SLDS v2.4.0\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport Icon from '../icon';\n\nimport { WELCOME_MAT_BADGE } from '../../utilities/constants';\n\nconst displayName = WELCOME_MAT_BADGE;\n\nconst propTypes = {\n\t/**\n\t *  **Assistive text for accessibility.**\n\t * * `completed` : For users of assistive technology, assistive text for completed icon.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tcompleted: PropTypes.string,\n\t}),\n\t/**\n\t * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * HTML id for component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Icon for the tile\n\t */\n\timage: PropTypes.string,\n\t/**\n\t * Whether the trail is completed\n\t */\n\tisComplete: PropTypes.bool,\n\t/**\n\t * Actions to be rendered on completion of the trail\n\t */\n\tonCompleteRenderActions: PropTypes.func,\n};\n\nconst defaultProps = {\n\tisComplete: false,\n\tvariant: 'steps',\n};\n\n/**\n * InfoBadge component item represents a tile in a Welcome Mat\n */\nclass InfoBadge extends React.Component {\n\tcomponentWillMount() {\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\t/**\n\t * Get the Welcome Mat Info Badge's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetCompletedText() {\n\t\treturn this.props.assistiveText && this.props.assistiveText.completed\n\t\t\t? this.props.assistiveText.completed\n\t\t\t: 'Completed';\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id={this.getId()} className={this.props.className}>\n\t\t\t\t<div className=\"slds-welcome-mat__info-badge-container\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName=\"slds-welcome-mat__info-badge\"\n\t\t\t\t\t\tsrc={this.props.image}\n\t\t\t\t\t\twidth=\"50\"\n\t\t\t\t\t\theight=\"50\"\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tcategory=\"action\"\n\t\t\t\t\t\tname=\"check\"\n\t\t\t\t\t\tassistiveText={{ label: this.getCompletedText() }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{this.props.children}\n\t\t\t\t{this.props.isComplete ? this.props.onCompleteRenderActions() : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nInfoBadge.displayName = displayName;\nInfoBadge.propTypes = propTypes;\nInfoBadge.defaultProps = defaultProps;\n\nexport default InfoBadge;\n"],"file":"info-badge.js"}