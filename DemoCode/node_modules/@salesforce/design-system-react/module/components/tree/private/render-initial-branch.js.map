{"version":3,"sources":["../../../../.tmp-es/components/tree/private/render-initial-branch.jsx"],"names":["React","PropTypes","isFunction","classNames","propTypes","htmlId","oneOfType","number","string","isRequired","initalClassName","array","object","initialStyle","handleScroll","event","props","percentage","target","scrollTop","scrollHeight","clientHeight","onScroll","renderInitialNode","children","displayName"],"mappings":"AAAA;;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAMC,SAAS,GAAG;AACjB;;;AAGAC,EAAAA,MAAM,EAAEJ,SAAS,CAACK,SAAV,CAAoB,CAACL,SAAS,CAACM,MAAX,EAAmBN,SAAS,CAACO,MAA7B,CAApB,EAA0DC,UAJjD;;AAKjB;;;AAGAC,EAAAA,eAAe,EAAET,SAAS,CAACK,SAAV,CAAoB,CACpCL,SAAS,CAACU,KAD0B,EAEpCV,SAAS,CAACW,MAF0B,EAGpCX,SAAS,CAACO,MAH0B,CAApB,CARA;;AAajB;;;AAGAK,EAAAA,YAAY,EAAEZ,SAAS,CAACW;AAhBP,CAAlB;;AAmBA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,KAAR,EAAkB;AACtC,MAAMC,UAAU,GACfF,KAAK,CAACG,MAAN,CAAaC,SAAb,IACCJ,KAAK,CAACG,MAAN,CAAaE,YAAb,GAA4BL,KAAK,CAACG,MAAN,CAAaG,YAD1C,IAEA,GAHD;;AAKA,MAAInB,UAAU,CAACc,KAAK,CAACM,QAAP,CAAd,EAAgC;AAC/BN,IAAAA,KAAK,CAACM,QAAN,CAAeP,KAAf,EAAsB;AACrBE,MAAAA,UAAU,EAAVA;AADqB,KAAtB;AAGA;AACD,CAXD;;AAaA,IAAMM,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAWR,KAAX;AAAA;AAAA;AACzB;AACA;AACA;AACC,mCAAoBA,KAAK,CAACX,MAA1B,cADD;AAEC,MAAA,SAAS,EAAEF,UAAU,CAAC,WAAD,EAAca,KAAK,CAACN,eAApB,CAFtB;AAGC,MAAA,QAAQ,EAAE,kBAACK,KAAD,EAAW;AACpBD,QAAAA,YAAY,CAACC,KAAD,EAAQC,KAAR,CAAZ;AACA,OALF;AAMC,MAAA,IAAI,EAAC,MANN;AAOC,MAAA,KAAK,EAAEA,KAAK,CAACH;AAPd,OASEW,QATF;AAHyB;AAAA,CAA1B;;AAgBAD,iBAAiB,CAACE,WAAlB,GAAgC,iBAAhC;AACAF,iBAAiB,CAACnB,SAAlB,GAA8BA,SAA9B;AAEA,eAAemB,iBAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Tree Initial Branch\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport isFunction from 'lodash.isfunction';\nimport classNames from 'classnames';\n\nconst propTypes = {\n\t/**\n\t * HTML `id` of the wrapping container element.\n\t */\n\thtmlId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\t/*\n\t * Class names to be added to the top-level `ul` element.\n\t */\n\tinitalClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/*\n\t * Styles to be added to the top-level `ul` element. Useful for `overflow:hidden`.\n\t */\n\tinitialStyle: PropTypes.object,\n};\n\nconst handleScroll = (event, props) => {\n\tconst percentage =\n\t\tevent.target.scrollTop /\n\t\t(event.target.scrollHeight - event.target.clientHeight) *\n\t\t100;\n\n\tif (isFunction(props.onScroll)) {\n\t\tprops.onScroll(event, {\n\t\t\tpercentage,\n\t\t});\n\t}\n};\n\nconst renderInitialNode = (children, props) => (\n\t// id intentionally not rendered here, and is present on\n\t// container that includes the header\n\t<ul\n\t\taria-labelledby={`${props.htmlId}__heading`}\n\t\tclassName={classNames('slds-tree', props.initalClassName)}\n\t\tonScroll={(event) => {\n\t\t\thandleScroll(event, props);\n\t\t}}\n\t\trole=\"tree\"\n\t\tstyle={props.initialStyle}\n\t>\n\t\t{children}\n\t</ul>\n);\n\nrenderInitialNode.displayName = 'TreeInitialNode';\nrenderInitialNode.propTypes = propTypes;\n\nexport default renderInitialNode;\n"],"file":"render-initial-branch.js"}