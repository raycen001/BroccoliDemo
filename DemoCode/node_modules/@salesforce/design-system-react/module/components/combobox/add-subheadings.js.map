{"version":3,"sources":["../../../.tmp-es/components/combobox/add-subheadings.js"],"names":["addSubheadings","subheadings","filteredOptions","subheadingsCopy","sortedOptions","noSubHeaderType","forEach","subH","id","option","type","push","concat","Object","values"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;AAIA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAAsC;AAAA;;AAAA,MAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,MAAtBC,eAAsB,QAAtBA,eAAsB;;AAC5D;AACA,MAAMC,eAAe,sBAAOF,WAAP,CAArB;;AACA,MAAMG,aAAa,GAAG;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAtB,CAH4D,CAK5D;;AACAF,EAAAA,eAAe,CAACG,OAAhB,CAAwB,UAACC,IAAD,EAAU;AACjC,QAAIA,IAAI,CAACC,EAAT,EAAa;AACZJ,MAAAA,aAAa,CAACG,IAAI,CAACC,EAAN,CAAb,GAAyB,CAACD,IAAD,CAAzB;AACA;AACD,GAJD,EAN4D,CAY5D;AACA;;AACAL,EAAAA,eAAe,CAACI,OAAhB,CAAwB,UAACG,MAAD,EAAY;AACnC,QAAIL,aAAa,CAACK,MAAM,CAACC,IAAR,CAAjB,EAAgC;AAC/BN,MAAAA,aAAa,CAACK,MAAM,CAACC,IAAR,CAAb,CAA2BC,IAA3B,CAAgCF,MAAhC;AACA,KAFD,MAEO;AACNL,MAAAA,aAAa,CAACC,eAAd,CAA8BM,IAA9B,CAAmCF,MAAnC;AACA;AACD,GAND,EAd4D,CAsB5D;AACA;AACA;;AACA,SAAO,aAAGG,MAAH,iCAAaC,MAAM,CAACC,MAAP,CAAcV,aAAd,CAAb,EAAP;AACA,CA1BD;;AA4BA,eAAeJ,cAAf","sourcesContent":["/* eslint-disable fp/no-mutating-methods */\n/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/**\n * This is a UX pattern recommendation for auto-complete search results that can contain multiple subheadings within the results. It inserts a subheading object based on `option.type === subheading.id` directly before a found option object and only inserts the subheading at the first occurence of that type of option.\n */\n\nconst addSubheadings = ({ subheadings, filteredOptions }) => {\n\t// Let's not mutate things we don't own.\n\tconst subheadingsCopy = [...subheadings];\n\tconst sortedOptions = { noSubHeaderType: [] };\n\n\t// populate an object with subheader ID as the keys\n\tsubheadingsCopy.forEach((subH) => {\n\t\tif (subH.id) {\n\t\t\tsortedOptions[subH.id] = [subH];\n\t\t}\n\t});\n\n\t// sort options into arrays using option type\n\t// if option type and subheader ID are equal, add to array, if no option type, add to noSubHeaderType array\n\tfilteredOptions.forEach((option) => {\n\t\tif (sortedOptions[option.type]) {\n\t\t\tsortedOptions[option.type].push(option);\n\t\t} else {\n\t\t\tsortedOptions.noSubHeaderType.push(option);\n\t\t}\n\t});\n\n\t// get object values by dropping keys\n\t// flatten and remove child arrays, so that we have one array\n\t// `...` operates on each array item, not the array\n\treturn [].concat(...Object.values(sortedOptions));\n};\n\nexport default addSubheadings;\n"],"file":"add-subheadings.js"}