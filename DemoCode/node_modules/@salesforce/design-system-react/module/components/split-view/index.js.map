{"version":3,"sources":["../../../.tmp-es/components/split-view/index.jsx"],"names":["React","PropTypes","shortid","classNames","ToggleButton","TOGGLE_BUTTON_WIDTH","SPLIT_VIEW","propTypes","assistiveText","shape","toggleButtonOpen","string","toggleButtonClose","id","className","oneOfType","array","object","isOpen","bool","events","onClose","func","onOpen","master","arrayOf","element","isRequired","masterWidth","detail","defaultProps","SplitView","props","state","generatedId","generate","getId","event","setState","prevState","getIsOpen","height","maxWidth","minWidth","getMasterViewId","onClick","toggle","marginLeft","Component"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport classNames from 'classnames';\n\nimport ToggleButton, { TOGGLE_BUTTON_WIDTH } from './private/toggle-button';\n\nimport { SPLIT_VIEW } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `toggleButtonOpen`: The button used to open the split view.\n\t * * `toggleButtonClose`: The button used to close the split view.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttoggleButtonOpen: PropTypes.string,\n\t\ttoggleButtonClose: PropTypes.string,\n\t}),\n\t/**\n\t * HTML Id for the component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * CSS classes to be added to the root `div` tag. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Sets the split view to be open or closed.\n\t */\n\tisOpen: PropTypes.bool,\n\t/**\n\t * Event Callbacks\n\t * * `onClose`: Triggered when the split view has closed.\n\t * * `onOpen`: Triggered when the split view has opened.\n\t */\n\tevents: PropTypes.shape({\n\t\tonClose: PropTypes.func,\n\t\tonOpen: PropTypes.func,\n\t}),\n\t/**\n\t * The React component that is rendered in the master section.\n\t * You need to pass in an array of elements in order for the scrolling to in the SplitViewList to work correctly.\n\t * React requires that you also supply a unique `key` for each element [React Lists and Keys](https://reactjs.org/docs/lists-and-keys.html#keys).\n\t */\n\tmaster: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.element),\n\t\tPropTypes.element,\n\t]).isRequired,\n\t/**\n\t * The width of the master section.\n\t */\n\tmasterWidth: PropTypes.string,\n\t/**\n\t * The React component that is rendered in the detail section.\n\t */\n\tdetail: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.element),\n\t\tPropTypes.element,\n\t]).isRequired,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\ttoggleButtonOpen: 'Close split view',\n\t\ttoggleButtonClose: 'Open split view',\n\t},\n\tevents: {},\n\tmasterWidth: '20rem',\n};\n\n/**\n * Split view is used to navigate between records in a list while staying on the same screen.\n */\nclass SplitView extends React.Component {\n\tstatic displayName = SPLIT_VIEW;\n\n\tstatic propTypes = propTypes;\n\n\tstatic defaultProps = defaultProps;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tisOpen: typeof props.isOpen === 'boolean' ? props.isOpen : true,\n\t\t};\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetIsOpen() {\n\t\treturn typeof this.props.isOpen === 'boolean'\n\t\t\t? this.props.isOpen\n\t\t\t: this.state.isOpen;\n\t}\n\n\tgetMasterViewId() {\n\t\treturn `master_view_${this.getId()}`;\n\t}\n\n\ttoggle(event) {\n\t\tif (typeof this.props.isOpen !== 'boolean') {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\tisOpen: !prevState.isOpen,\n\t\t\t}));\n\t\t}\n\n\t\tconst isOpen = this.getIsOpen();\n\n\t\tif (isOpen && this.props.events.onClose) {\n\t\t\tthis.props.events.onClose(event);\n\t\t} else if (!isOpen && this.props.events.onOpen) {\n\t\t\tthis.props.events.onOpen(event);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={this.getId()}\n\t\t\t\tclassName={classNames('slds-grid', this.props.className)}\n\t\t\t\tstyle={{\n\t\t\t\t\theight: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmaxWidth: this.getIsOpen() ? this.props.masterWidth : '0',\n\t\t\t\t\t\tminWidth: this.getIsOpen() ? this.props.masterWidth : '0',\n\t\t\t\t\t}}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-split-view_container',\n\t\t\t\t\t\t{ 'slds-is-open': this.getIsOpen() },\n\t\t\t\t\t\t{ 'slds-is-closed': !this.getIsOpen() }\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\tassistiveText={this.props.assistiveText}\n\t\t\t\t\t\tariaControls={this.getMasterViewId()}\n\t\t\t\t\t\tisOpen={this.getIsOpen()}\n\t\t\t\t\t\tevents={{\n\t\t\t\t\t\t\tonClick: (event) => this.toggle(event),\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<article\n\t\t\t\t\t\tid={this.getMasterViewId()}\n\t\t\t\t\t\tclassName=\"slds-split-view slds-grid slds-grid_vertical slds-grow slds-scrollable_none\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.getIsOpen() ? this.props.master : null}\n\t\t\t\t\t</article>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginLeft: TOGGLE_BUTTON_WIDTH,\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"slds-grow slds-scrollable_y\"\n\t\t\t\t>\n\t\t\t\t\t{this.props.detail}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SplitView;\n"],"file":"index.js"}