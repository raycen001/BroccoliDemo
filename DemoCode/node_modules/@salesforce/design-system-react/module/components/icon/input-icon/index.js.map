{"version":3,"sources":["../../../../.tmp-es/components/icon/input-icon/index.jsx"],"names":["React","PropTypes","classNames","isFunction","UtilityIcon","Button","ICON_INPUT","InputIcon","props","category","iconPosition","name","path","onClick","variant","rest","variants","combobox","base","displayName","propTypes","string","oneOf","func","defaultProps"],"mappings":";;;;;;;;AAAA;;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,8BAA3B;AAEA;;;;;;;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAAA,MAE3BC,QAF2B,GASxBD,KATwB,CAE3BC,QAF2B;AAAA,MAG3BC,YAH2B,GASxBF,KATwB,CAG3BE,YAH2B;AAAA,MAI3BC,IAJ2B,GASxBH,KATwB,CAI3BG,IAJ2B;AAAA,MAK3BC,IAL2B,GASxBJ,KATwB,CAK3BI,IAL2B;AAAA,MAM3BC,OAN2B,GASxBL,KATwB,CAM3BK,OAN2B;AAAA,MAO3BC,OAP2B,GASxBN,KATwB,CAO3BM,OAP2B;AAAA,MAQxBC,IARwB,4BASxBP,KATwB,uEAW5B;;;AAEA,MAAMQ,QAAQ,GAAG;AAChBC,IAAAA,QAAQ;AAAA;AACP;AAAM,MAAA,SAAS,EAAC;AAAhB;AAAA;AACC,wBAAC,WAAD;AACC,yBADD;AAEC,MAAA,QAAQ,EAAER,QAFX;AAGC,MAAA,SAAS,EAAEP,UAAU,CACpB,oDADoB,CAHtB;AAMC,MAAA,IAAI,EAAES,IANP;AAOC,MAAA,IAAI,EAAEC;AAPP,OAQKG,IARL,EADD,CAFe;AAehBG,IAAAA,IAAI;AAAA;AACH,wBAAC,WAAD;AACC,yBADD;AAEC,MAAA,QAAQ,EAAET,QAFX;AAGC,MAAA,SAAS,EAAEP,UAAU,CAAC,yCAAD,iDACCQ,YADD,GACkBA,YADlB,EAHtB;AAMC,MAAA,IAAI,EAAEC,IANP;AAOC,MAAA,IAAI,EAAEC;AAPP,OAQKG,IARL;AAhBe,GAAjB;AA6BA,SAAOZ,UAAU,CAACU,OAAD,CAAV;AAAA;AACN,sBAAC,MAAD;AACC,IAAA,SAAS,EAAEX,UAAU,CAAC,kBAAD,iDACCQ,YADD,GACkBA,YADlB,EADtB;AAIC,IAAA,YAAY,EAAED,QAJf;AAKC,IAAA,QAAQ,EAAEE,IALX;AAMC,IAAA,QAAQ,EAAEC,IANX;AAOC,IAAA,OAAO,EAAEC,OAPV;AAQC,IAAA,OAAO,EAAC;AART,KASKE,IATL,EADM,GAaNC,QAAQ,CAACF,OAAD,CAbT;AAeA,CAzDD;;AA2DAP,SAAS,CAACY,WAAV,GAAwBb,UAAxB;AAEAC,SAAS,CAACa,SAAV,GAAsB;AACrB;;;AAGAX,EAAAA,QAAQ,EAAER,SAAS,CAACoB,MAJC;;AAKrB;;;AAGAX,EAAAA,YAAY,EAAET,SAAS,CAACqB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CARO;;AASrB;;;AAGAX,EAAAA,IAAI,EAAEV,SAAS,CAACoB,MAZK;;AAarB;;;AAGAT,EAAAA,IAAI,EAAEX,SAAS,CAACoB,MAhBK;;AAiBrB;;;AAGAR,EAAAA,OAAO,EAAEZ,SAAS,CAACsB,IApBE;;AAqBrB;;;AAGAT,EAAAA,OAAO,EAAEb,SAAS,CAACqB,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB;AAxBY,CAAtB;AA2BAf,SAAS,CAACiB,YAAV,GAAyB;AACxBf,EAAAA,QAAQ,EAAE,SADc;AAExBK,EAAAA,OAAO,EAAE;AAFe,CAAzB;AAKA,eAAeP,SAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from 'classnames';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ## Children\nimport UtilityIcon from '../../utilities/utility-icon';\nimport Button from '../../button';\n\n// ## Constants\nimport { ICON_INPUT } from '../../../utilities/constants';\n\n/**\n * A wrapper for icons that will be rendered inside of an Input\n *\n * If the `onClick` function prop is provided, the `design-system-react/components/button` component is used.\n * If not, the icon will be an instance of `design-system-react/components/utilities/utility-icon`.\n * Checkout out the appropriate component to see what props can be passed along via the `{...props}` rest operator\n */\nconst InputIcon = (props) => {\n\tconst {\n\t\tcategory,\n\t\ticonPosition,\n\t\tname,\n\t\tpath,\n\t\tonClick,\n\t\tvariant,\n\t\t...rest\n\t} = props;\n\n\t// need to pass click event up on SVG\n\n\tconst variants = {\n\t\tcombobox: (\n\t\t\t<span className=\"slds-icon_container slds-input__icon slds-input__icon_right\">\n\t\t\t\t<UtilityIcon\n\t\t\t\t\taria-hidden\n\t\t\t\t\tcategory={category}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-icon slds-icon_x-small slds-icon-text-default'\n\t\t\t\t\t)}\n\t\t\t\t\tname={name}\n\t\t\t\t\tpath={path}\n\t\t\t\t\t{...rest}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t),\n\t\tbase: (\n\t\t\t<UtilityIcon\n\t\t\t\taria-hidden\n\t\t\t\tcategory={category}\n\t\t\t\tclassName={classNames('slds-input__icon slds-icon-text-default', {\n\t\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t\t})}\n\t\t\t\tname={name}\n\t\t\t\tpath={path}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t),\n\t};\n\n\treturn isFunction(onClick) ? (\n\t\t<Button\n\t\t\tclassName={classNames('slds-input__icon', {\n\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t})}\n\t\t\ticonCategory={category}\n\t\t\ticonName={name}\n\t\t\ticonPath={path}\n\t\t\tonClick={onClick}\n\t\t\tvariant=\"icon\"\n\t\t\t{...rest}\n\t\t/>\n\t) : (\n\t\tvariants[variant]\n\t);\n};\n\nInputIcon.displayName = ICON_INPUT;\n\nInputIcon.propTypes = {\n\t/**\n\t * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n\t */\n\tcategory: PropTypes.string,\n\t/**\n\t * This is only needed if an input contains two icons, the Input component handles this prop for you.\n\t */\n\ticonPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings.\n\t */\n\tpath: PropTypes.string,\n\t/**\n\t * This event fires when the icon is clicked.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Changes styles of the InputIcon.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'combobox']),\n};\n\nInputIcon.defaultProps = {\n\tcategory: 'utility',\n\tvariant: 'base',\n};\n\nexport default InputIcon;\n"],"file":"index.js"}