{"version":3,"sources":["../../.tmp-es/utilities/dom.js"],"names":["React","flatMapChildren","children","iterator","result","go","xs","Children","map","child","push","type","props","hasChild","name","flag","textContent","join","helpers"],"mappings":"AAAA;;AACA;;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;AAGA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,QAAnC,EAA6C;AAC5C,MAAMC,MAAM,GAAG,EAAf;;AACA,WAASC,EAAT,CAAYC,EAAZ,EAAgB;AACf,WAAON,KAAK,CAACO,QAAN,CAAeC,GAAf,CAAmBF,EAAnB,EAAuB,UAACG,KAAD,EAAW;AACxC;AACAL,MAAAA,MAAM,CAACM,IAAP,CAAYP,QAAQ,CAACM,KAAD,CAApB;AACA,UAAIA,KAAK,CAACE,IAAV,EAAgBN,EAAE,CAACI,KAAK,CAACG,KAAN,CAAYV,QAAb,CAAF;AAChB,KAJM,CAAP;AAKA;;AACDG,EAAAA,EAAE,CAACH,QAAD,CAAF;AACA,SAAOE,MAAP;AACA;AAED;;;;;AAGA,SAASS,QAAT,CAAkBX,QAAlB,EAA4BY,IAA5B,EAAkC;AACjC,MAAIC,IAAI,GAAG,KAAX;AACAd,EAAAA,eAAe,CAACC,QAAD,EAAW,UAACO,KAAD,EAAW;AACpCM,IAAAA,IAAI,GAAGA,IAAI,IAAKN,KAAK,CAACE,IAAN,IAAcF,KAAK,CAACE,IAAN,CAAWG,IAAX,KAAoBA,IAAlD;AACA,GAFc,CAAf;AAGA,SAAOC,IAAP;AACA,C,CAED;;;AACA,SAASC,WAAT,CAAqBd,QAArB,EAA+B;AAC9B,SAAOD,eAAe,CAACC,QAAD,EAAW,UAACO,KAAD,EAAW;AAC3C;AACA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOA,KAAP;AAC/B,GAHqB,CAAf,CAGJQ,IAHI,CAGC,GAHD,CAAP;AAIA;;AAED,IAAMC,OAAO,GAAG;AAAEF,EAAAA,WAAW,EAAXA,WAAF;AAAeH,EAAAA,QAAQ,EAARA;AAAf,CAAhB;AAEA,eAAeK,OAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable consistent-return */\n\nimport React from 'react';\n\n/**\n * Traverse all children\n */\nfunction flatMapChildren(children, iterator) {\n\tconst result = [];\n\tfunction go(xs) {\n\t\treturn React.Children.map(xs, (child) => {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tresult.push(iterator(child));\n\t\t\tif (child.type) go(child.props.children);\n\t\t});\n\t}\n\tgo(children);\n\treturn result;\n}\n\n/**\n * Perhaps there's a more pragmatic way to do this. Eventually, I suspect we'll have some utils to help find children.\n */\nfunction hasChild(children, name) {\n\tlet flag = false;\n\tflatMapChildren(children, (child) => {\n\t\tflag = flag || (child.type && child.type.name === name);\n\t});\n\treturn flag;\n}\n\n// findDOMNode complains so filter out strings from virtual dom\nfunction textContent(children) {\n\treturn flatMapChildren(children, (child) => {\n\t\t// eslint-disable-line consistent-return\n\t\tif (typeof child === 'string') return child;\n\t}).join(' ');\n}\n\nconst helpers = { textContent, hasChild };\n\nexport default helpers;\n"],"file":"dom.js"}