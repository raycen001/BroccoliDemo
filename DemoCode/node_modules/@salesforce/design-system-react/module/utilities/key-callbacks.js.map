{"version":3,"sources":["../../.tmp-es/utilities/key-callbacks.js"],"names":["EventUtil","mapKeyEventCallbacks","event","callbacks","shiftCallbacks","stopPropagation","shiftKey","keyCode","trapEvent","callback","data","other"],"mappings":"AAAA;;AACA;AACA,OAAOA,SAAP,MAAsB,SAAtB;AAEA;;;;;;;AAMA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC5BC,KAD4B,QAGxB;AAAA,4BADFC,SACE;AAAA,MADFA,SACE,+BADU,EACV;AAAA,iCADcC,cACd;AAAA,MADcA,cACd,oCAD+B,EAC/B;AAAA,kCADmCC,eACnC;AAAA,MADmCA,eACnC,qCADqD,IACrD;;AACJ,MAAIH,KAAK,CAACI,QAAN,IAAkBJ,KAAK,CAACK,OAAxB,IAAmCH,cAAc,CAACF,KAAK,CAACK,OAAP,CAArD,EAAsE;AACrE,QAAIF,eAAJ,EAAqB;AACpBL,MAAAA,SAAS,CAACQ,SAAV,CAAoBN,KAApB;AACA;;AACDE,IAAAA,cAAc,CAACF,KAAK,CAACK,OAAP,CAAd,CAA8BE,QAA9B,CACCP,KADD,EAECE,cAAc,CAACF,KAAK,CAACK,OAAP,CAAd,CAA8BG,IAF/B;AAIA,GARD,MAQO,IAAIR,KAAK,CAACK,OAAN,IAAiBJ,SAAS,CAACD,KAAK,CAACK,OAAP,CAA9B,EAA+C;AACrD,QAAIF,eAAJ,EAAqB;AACpBL,MAAAA,SAAS,CAACQ,SAAV,CAAoBN,KAApB;AACA;;AACDC,IAAAA,SAAS,CAACD,KAAK,CAACK,OAAP,CAAT,CAAyBE,QAAzB,CAAkCP,KAAlC,EAAyCC,SAAS,CAACD,KAAK,CAACK,OAAP,CAAT,CAAyBG,IAAlE;AACA,GALM,MAKA,IAAIR,KAAK,CAACK,OAAN,IAAiBJ,SAAS,CAACQ,KAA/B,EAAsC;AAC5C;AACA,QAAIR,SAAS,CAACQ,KAAV,CAAgBN,eAApB,EAAqC;AACpCL,MAAAA,SAAS,CAACQ,SAAV,CAAoBN,KAApB;AACA;;AACDC,IAAAA,SAAS,CAACQ,KAAV,CAAgBF,QAAhB,CAAyBP,KAAzB,EAAgCC,SAAS,CAACQ,KAAV,CAAgBD,IAAhD;AACA;AACD,CAxBD;;AA0BA,eAAeT,oBAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport EventUtil from './event';\n\n/*\n * Helper function that has callbacks passed into it with the key\n * being the keycode of the event. This allows an object literal to\n * control key event callback mapping and avoids a long conditional\n * if statement and uses an enumeration pattern instead.\n */\nconst mapKeyEventCallbacks = (\n\tevent,\n\t{ callbacks = {}, shiftCallbacks = {}, stopPropagation = true }\n) => {\n\tif (event.shiftKey && event.keyCode && shiftCallbacks[event.keyCode]) {\n\t\tif (stopPropagation) {\n\t\t\tEventUtil.trapEvent(event);\n\t\t}\n\t\tshiftCallbacks[event.keyCode].callback(\n\t\t\tevent,\n\t\t\tshiftCallbacks[event.keyCode].data\n\t\t);\n\t} else if (event.keyCode && callbacks[event.keyCode]) {\n\t\tif (stopPropagation) {\n\t\t\tEventUtil.trapEvent(event);\n\t\t}\n\t\tcallbacks[event.keyCode].callback(event, callbacks[event.keyCode].data);\n\t} else if (event.keyCode && callbacks.other) {\n\t\t// You will likely NOT want to stop propagation of all key presses!\n\t\tif (callbacks.other.stopPropagation) {\n\t\t\tEventUtil.trapEvent(event);\n\t\t}\n\t\tcallbacks.other.callback(event, callbacks.other.data);\n\t}\n};\n\nexport default mapKeyEventCallbacks;\n"],"file":"key-callbacks.js"}